<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.oasis-open.org/docbook/4.5" xmlns:xl="http://www.w3.org/1999/xlink"
	xsi:schemaLocation="http://www.oasis-open.org/docbook/4.5 http://www.oasis-open.org/docbook/xsd/4.5/docbook.xsd">

	<title>Getting started with DataCleaner desktop</title>

	<section id="installing_datacleaner">
		<title>Installing the desktop application</title>

		<para>These are the system requirements of DataCleaner:</para>
		<orderedlist>
			<listitem>
				A computer (with a graphical display, except if run in command-line
				mode).
			</listitem>
			<listitem>
				A
				<link xl:href="http://www.java.com">Java Runtime Environment</link>
				(JRE), version 7 or higher.
			</listitem>
			<listitem>
				A DataCleaner software license file. If you've requested a free
				trial or purchased DataCleaner online, this file will have been sent
				to your email address.
			</listitem>
		</orderedlist>

		<para>
			Start the installation procedure using the installer program.
			The
			installer program is an executable JAR file, which is executable
			on
			most systems if you simply double-click it.
		</para>

		<tip>
			<para>If the installer does not launch when you double-click it,
				open
				a command prompt and enter:
			</para>
			<blockquote>
				java -jar DataCleaner-[edition]-[version]-install.jar
			</blockquote>
		</tip>

		<para>Troubleshooting</para>
		<para>Usually the installation procedure is trivial and
			self-explanatory. But in case something is not working as expected,
			please check the following points:
		</para>

		<orderedlist>
			<listitem>
				<para>
					On Windows systems, if you do not have
					<emphasis>Administrative privileges</emphasis>
					on the machine, we encourage you to install DataCleaner in your
					user's directory instead of in 'Program Files'.
				</para>
			</listitem>
			<listitem>
				<para>
					On some Windows systems you can get a warning '
					<emphasis>There is no script engine for file extension '.js'
					</emphasis>
					'. This happens when .js files (JavaScript) files are associated
					with an editor instead of Windows' built-in scripting engine. To
					resolve this issue, please refer to these help links:
				</para>
				<orderedlist>
					<listitem>
						<para>
							<link
								xl:href="http://answers.microsoft.com/en-us/windows/forum/windows_7-system/fix-there-is-no-script-engine-for-file-extension/95d58867-3f31-45e3-aeaf-32ecea4d33c1">answers.microsoft.com</link>
							, which address the issue and recommends...
						</para>
					</listitem>
					<listitem>
						<para>
							<link
								xl:href="http://www.winhelponline.com/articles/230/1/Error-There-is-no-script-engine-for-file-extension-when-running-js-files.html">winhelponline.com</link>
							, which has a fix for the issue
						</para>
					</listitem>
				</orderedlist>
			</listitem>
			<listitem>
				<para>If you have issues with locating or selecting the software
					license file, you can skip the step in the installer by copying the
					license file manually to this folder: '~/.datacleaner' (where ~ is
					your User's home folder). Note that on Windows machines it is
					prohibited by Windows explorer to create directories starting with
					dot (.), but it can be done using the command prompt:
				</para>
				<blockquote>
					mkdir .datacleaner
				</blockquote>
			</listitem>

		</orderedlist>

	</section>

	<section id="connecting_to_your_datastore">
		<title>Connecting to your datastore</title>
		<para>Below is a screenshot of the initial screen that
			will be
			presented when launching DataCleaner (desktop community edition).
			A
			new datastore can be added in the "New job from scratch" or in
			"Manage datastores" screens available by clicking the buttons in the
			bottom of the screen.
		</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="welcome_screen.jpg" format="JPG"
					scalefit="1" />
			</imageobject>
		</mediaobject>
		<para>
			File datastores can be added using a drop zone (or browse
			button) located in the top of the screen. Below, there are buttons
			that enable adding databases or cloud services.
		</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="new_job_from_scratch_screen.jpg"
					format="JPG" scalefit="1" />
			</imageobject>
		</mediaobject>
		<para>
			If the file is added
			using the drop zone, its format will be
			inferred. If you need more control
			over how the file is going to be
			interpreted, use the alternative way
			to add a new datastore - "Manage
			datastores" button in the welcome screen.
		</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="datastore_management_screen.jpg"
					format="JPG" scalefit="1" />
			</imageobject>
		</mediaobject>
		<para>
			The "Datastore management" screen - except from viewing and
			editing existing datastores - has an option to add a new one based on
			its type. Choose an icon in the bottom of the screen that suits your
			datastore type.
		</para>

		<para>Once you've registered ('created') your own datastore, you can
			select it from the list and (in "New job from scratch" screen) or
			select it from the list and click "Build job" (in "Datastore
			Management" screen) to start working with
			it!
		</para>

		<tip>
			<para>
				You can also configure your datastore by means of the
				configuration
				file (conf.xml), which has both some pros and some cons.
				For more
				information, read the
				<link linkend="chapter_configuration_file">configuration file chapter</link>
				.
			</para>
		</tip>
	</section>

	<section id="adding_components">
		<title>Adding components to the job</title>
		<para>There are a few different kinds of components that you can add
			to your
			job:
		</para>
		<orderedlist>
			<listitem>
				<para>
					<emphasis>Analyzers</emphasis>
					, which are the most important components. Actually, without at
					least one analyzer the job will not run (if you execute the job
					without adding one, DataCleaner will suggest adding a basic one
					that will save the output to a file). An analyzer is a component
					that inspects the data that it receives and generates a result or a
					report. The majority of the data profiling cruft is created as
					analyzers.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>Transformers</emphasis>
					are components used to modify the data before analyzing it.
					Sometimes it's neccessary to extract parts of a value or combine
					two
					values to correctly get an idea about a particular measure. In
					other scenarios, transformers can be used to perform reference data
					lookups or other similar tasks and place the results of an
					operation into the stream of data in the job.
				</para>
				<para>
					The result of a transformer is a set of output columns. These
					columns work exactly like regular columns in your job, except that
					they have a preceding step in the flow before they become
					materialized.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>Filters</emphasis>
					are components that split the flow of processing in a job. A filter
					will have a number of possible outcomes and depending on the
					outcome of a filter, a particular row might be processed by
					different sub-flows. Filters are often used simply to disregard
					certain rows from the analysis, eg. null values or values outside
					the range of interest.
				</para>
			</listitem>
		</orderedlist>
		<para>Each of these
			components will be presented as a node in the job
			graph. Double-clicking a component (graph node) will bring its
			configuration dialog.
		</para>
		<para>
			Transformers and filters are added to your job using the "Transform"
			and "Improve"
			menus. The menus are available in the panel at the top
			or by right-clicking on an empty space in the canvas.
			Please refer to
			the reference chapter
			<link linkend="transformations">Transformations</link>
			for more
			information on specific transformers and filters.
		</para>
		<para>
			Analyzers are added to your job using the "Analyze" menu (in most
			cases), but also "Write" menu for analyzers that save output to a
			datastore. Please
			refer to the reference chapter
			<link linkend="analyzers">Analyzers</link>
			for more
			information on specific analyzers.
		</para>
	</section>

	<section id="wiring_components">
		<title>Wiring components together</title>
		<para>Simply adding a transformer or filter actually doesn't change
			your job as such! This is because these components only have an
			impact if you wire them together.
		</para>
		<section>
			<title>Transformer output</title>
			<para>To wire a transformer you simply need to draw an arrow between
				the components in the graph. You can start drawing it by
				right-clicking the first of the components and choosing "Link to..."
				from the context menu. An alternative way to enter the drawing mode
				is to select the component and connect the components with Shift
				button pressed.
			</para>
		</section>
		<mediaobject>
			<imageobject>
				<imagedata fileref="connecting_components.jpg" format="JPG"
					scalefit="1" />
			</imageobject>
		</mediaobject>
		<section>
		<title>Filter requirement</title>
		<para>To wire a filter you need to set up a dependency on either of
			it's outcomes. All components have a button for selecting filter
			outcomes in the top-right corners of their configuration dialogs.
			Click this button to select a filter outcome to depend on. If you
			have
			multiple filters you can chain these simply by having dependent
			outcomes of the individual filters.
		</para>
		</section>
		<tip>
			<para>
				In the bottom part of the canvas, a help message is displayed
				instructing what needs to be done in current moment to build a valid
				job.
			</para>
		</tip>
		<section id="wiring_components_output_data_streams">
			<title>Output data streams</title>
			<para>
				The "Link to..." option wires components together in the "main
				flow". However, some components are able to produce additional
				output
				data streams. For example, the main feature of a Completeness
				Analyzer is to
				produce a summary of records completeness in the job
				result window.
				Additionally, it produces two output data streams -
				"Complete
				records" and "Incomplete records".
				<emphasis role="bold">Output data streams
					behave
					similarly to a source table, although such a table is created
					dynamically by a component.
				</emphasis>
				This enables further processing
				of such
				output.
			</para>
			<para>Components producing output data streams have additional "Link
				to..." position in the right-click menu to wire the output with
				subsequent components.
			</para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="output_data_streams_link_to.png"
						format="PNG" scalefit="1" />
				</imageobject>
			</mediaobject>
			<para>Instead of wiring components with "Link to..." menu option,
				double-clicking a component brings up a configuration dialog that
				can be used to choose its input columns. In the top-right corner of
				the dialog, the scope of the component can be chosen. Switching
				between scopes gives us the possibility to choose input columns from
				the "main flow" (default scope) or from output data streams.
			</para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="output_data_streams_change_scope.png"
						format="PNG" scalefit="1" />
				</imageobject>
			</mediaobject>
			<para>An example job using output data streams: 
			</para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="wiring_components_output_data_streams_job.png"
						format="PNG" scalefit="1" />
				</imageobject>
			</mediaobject>
		</section>
	</section>

	<section id="executing">
		<title>Executing jobs</title>
		<para>When a job has been built you can execute it. To check whether
			your job is correctly configured and ready to execute, check the
			status bar in the bottom of the job building window.
		</para>
		<para>To execute the job, simply click the "Execute" button in
			the
			top-right corner of the window. This will bring up the result
			window,
			which contains:
		</para>
		<orderedlist>
			<listitem>
				<para>
					The
					<emphasis>Progress information</emphasis>
					tab which contains useful information and progress indications
					while the job is executing.
				</para>
			</listitem>
			<listitem>
				<para>Additional tabs for each component type that produces a
					result/report. For instance 'Value distribution' if such a
					component was added to the job.
				</para>
			</listitem>
		</orderedlist>
		<para>Here's an example of an analysis result window:</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="analysis_job_05_result.jpg" format="JPG"
					scalefit="1" />
			</imageobject>
		</mediaobject>
	</section>

	<section id="saving_and_opening_jobs">
		<title>Saving and opening jobs</title>
		<para>You can save your jobs in order to reuse them at a later time.
			Saving a job is simple: Simply click the "Save" button
			in the top
			panel of the window.
		</para>
		<para>Analysis jobs are saved in files with the ".analysis.xml"
			extension. These files are XML files that are readable and editable
			using any XML editor.
		</para>
		<para>Opening jobs can be done using the "Open" menu item. Opening a
			job will restore a job building window
			from where you can edit and run
			the job.
		</para>
	</section>

	<section id="template_jobs">
		<title>Template jobs</title>
		<para>DataCleaner contains a feature where you can reuse a job for
			multiple datastores or just multiple columns in the same datastore.
			We call this feature 'template jobs'.
		</para>
		<para>When opening a job you are presented with a file chooser. When
			you select a job file a panel will appear, containing some
			information about the job as well as available actions:
		</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="template_job_01_filechooser.jpg"
					format="JPG" scalefit="1" />
			</imageobject>
		</mediaobject>
		<para>If you click the 'Open as template' button you will be presented
			with a dialog where you can map the job's original columns to a new
			set of columns:
		</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="template_job_02_mapping.jpg" format="JPG"
					scalefit="1" />
			</imageobject>
		</mediaobject>
		<para>First you need to specify the datastore to use. On the left side
			you see the name of the original datastore, but the job is not
			restricted to use only this datastore. Select a datastore from the
			list and the fields below for the columns will become active.
		</para>
		<para>Then you need to map individual columns. If you have two
			datastore that have the same column names, you can click the "Map
			automatically" button and they will be automatically assigned.
			Otherwise you need to map the columns from the new datastore's
			available columns.
		</para>
		<para>Finally your job may contain 'Job-level variables'. These are
			configurable properties of the job that you might also want to fill
			out.
		</para>
		<para>Once these 2-3 steps have been completed, click the "Open job"
			button, and DataCleaner will be ready for executing the job on a new
			set of columns!
		</para>
	</section>

	<section id="writing-cleansed-data">
		<title>Writing cleansed data to files</title>
		<para>Although the primary focus of DataCleaner is analysis, often
			during such analysis you will find yourself actually improving data
			by means of applying transformers and filters on it. When this is the
			case, obviously you will want to export the improved/cleansed data so
			you can utilize it in other situations than the analysis.
		</para>
		<para>
			Please refer to the reference chapter
			<link linkend="writers">Writers</link>
			for more information on writing cleansed data.
		</para>
	</section>

</chapter>
