<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	id="transformations" xmlns="http://www.oasis-open.org/docbook/4.5"
	xmlns:xl="http://www.w3.org/1999/xlink"
	xsi:schemaLocation="http://www.oasis-open.org/docbook/4.5 http://www.oasis-open.org/docbook/xsd/4.5/docbook.xsd">

	<title>Transform</title>

	<chapterinfo>
		<abstract>
			<para>With transformations you can pre- and postprocess your data as
				part
				of your DQ project.
			</para>
			<para>Technically speaking there are two kinds of transformations:
				Transformers and Filters. Transformers are used to extract, generate
				or refine data (new columns and sometimes also new rows), whereas
				filters are used to limit or split the dataset into separate
				processing streams.
			</para>
			<para>There's quite a lot of transformations available in
				DataCleaner,
				more than will be feasible to describe all in detail.
				This chapter
				provides a documentation for some of the essential ones.
			</para>
		</abstract>
	</chapterinfo>

	<section id="table_lookup_transformer">
		<title>Table lookup</title>
		<para>The table lookup transformer allows you to look up values in a
			different table. Any amount of columns can be used for mapping
			(lookup conditioning) and for outputting (the outcome of the lookup).
		</para>
		<para>The configuration screen for the table lookup transformer looks
			like this:
		</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="transformer_reference_table_lookup.jpg"
					format="JPG" scalefit="1" />
			</imageobject>
		</mediaobject>
		<para>To make the mapping you need to select the target datastore,
			schema and table names. Once selected you will be able to select
			which columns to use for condition setting when looking up values.
		</para>
		<para>The semantics of the Table lookup are close to the semantics
			of a
			LEFT JOIN. If no lookup value is found, nulls will be returned.
			However, if multiple records are found to match the conditions, only
			the first will be returned.
		</para>
		<para>Note that the Table lookup will use a cache for looking up
			values, to avoid querying the target table for every incoming value.
		</para>
	</section>

	<section id="national_identifiers">
		<title>
			National identifiers
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="notice_commercial_editions_only.png"
						format="PNG" />
				</imageobject>
			</inlinemediaobject>
		</title>

		<para>With the 'National identifiers' transformations you can validate
			and extract useful information from common national identifiers, such
			as social security numbers, company registrations etc.
		</para>

		<para>There are components available for a number of countries and
			domains, see the screenshot below:
		</para>

		<mediaobject>
			<imageobject>
				<imagedata fileref="transformer_reference_national_identifiers.jpg"
					format="JPG" scalefit="1" />
			</imageobject>
		</mediaobject>

		<para>
			Each transformation will produce a properly formatted variant of
			the identifier, and a boolean output column which determines if a
			particular identifier is valid or not. In addition the
			transformations will produce the following output fields, all
			depending on the domain and conventions applied within the country:
		</para>

		<orderedlist>
			<listitem>
				<para>Gender of person</para>
			</listitem>
			<listitem>
				<para>Birthdate</para>
			</listitem>
			<listitem>
				<para>The gender of the person</para>
			</listitem>
			<listitem>
				<para>The date of founding the company</para>
			</listitem>
		</orderedlist>
	</section>

	<section id="javascript_transformer">
		<title>JavaScript transformer</title>
		<para>The JavaScript transformer allows the user to define his/her own
			script which can
			perform rather intricate things like conditioning,
			looping. It can also be
			used as a
			useful way to express small business
			rules.
		</para>
		<para>For this documentation, a complete reference of JavaScript is
			out of scope. But we will show a few examples and more importantly
			talk about the available variables and their types.
		</para>
		<para>The JavaScript transformer returns a single string. The entered
			script should provide this string as the last line of the script.
			This is why the template script is as follows (so you can just
			implement the eval() function):
		</para>
		<programlisting>
			function&#160;eval() {
			&#160;&#160;&#160;return&#160;\"hello&#160;\"&#160;+&#160;values[0];
			}
			eval();
		</programlisting>

		<para>Variables:</para>
		<table>
			<title>JavaScript variables</title>
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Variable</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>values</entry>
						<entry>
							<para>An array of all values in the row (as mapped by the
								"Columns" property).
							</para>
							<para>Using "values" you can reference eg. the first and third
								values like this:
							</para>
							<programlisting>
								var first = values[0];
								var third = values[2];
							</programlisting>
							<para>Note that JavaScript arrays are 0-based.</para>
							<para>Instead of indexes you can also reference by column name,
								like this:
							</para>
							<programlisting>
								var idValue = values["id"];
							</programlisting>

						</entry>
					</row>
					<row>
						<entry>
							<emphasis>column_name</emphasis>
							*
						</entry>
						<entry>
							<para>
								Any column name that is also a valid JavaScript and
								<emphasis>not</emphasis>
								a reserved variable name will also be added directly to the
								scope of the script as a variable. For example, if you have two
								columns, FIRST_NAME and LAST_NAME, you can concatenate them
								easily, like this:
							</para>
							<programlisting>var fullname = FIRST_NAME + " " + LAST_NAME;
							</programlisting>
						</entry>
					</row>
					<row>
						<entry>out</entry>
						<entry>
							<para>A reference to the system console's "out" stream. If
								running DataCleaner with the console visible, you can print
								messages to the console, like this:
							</para>
							<programlisting>out.println("Value: " + values[0]);
							</programlisting>
						</entry>
					</row>
					<row>
						<entry>log</entry>
						<entry>
							<para>A reference to the logging subsystem. Logging can be
								configured and log messages are stored in files, which makes it
								a bit more flexible than simply using "out". Here's how you
								write a few log messages with varying severities:
							</para>
							<programlisting>
								log.debug("This&#160;is&#160;a&#160;DEBUG&#160;message,&#160;it&#160;will&#160;probably&#160;be&#160;disregarded");
								log.info("This&#160;is&#160;a&#160;INFO&#160;message,&#160;it&#160;will&#160;probably&#160;be&#160;written&#160;to&#160;the&#160;logs");
								log.warn("This&#160;is&#160;a&#160;WARN&#160;message,&#160;it&#160;will&#160;most&#160;likely&#160;be&#160;written&#160;to&#160;the&#160;logs");
								log.error("This&#160;is&#160;a&#160;ERROR&#160;message,&#160;it&#160;will&#160;almost&#160;certainly&#160;be&#160;written&#160;to&#160;the&#160;logs");
							</programlisting>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>

		<para>Data types:</para>
		<table>
			<title>JavaScript data types</title>
			<tgroup cols="2">
				<thead>
					<row>
						<entry>Data type</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>STRING</entry>
						<entry>
							<para>String values are represented as JavaScript strings, which
								means that they have (among others) methods like:
							</para>
							<programlisting>
								var str = values[0];

								//&#160;get&#160;the&#160;length&#160;of&#160;a&#160;string
								var&#160;len&#160;=&#160;str.length();

								//&#160;uppercase&#160;variant&#160;of&#160;a&#160;string
								var&#160;up&#160;=&#160;str.toUpperCase();

								//&#160;lowercase&#160;variant&#160;of&#160;a&#160;string
								var&#160;lw&#160;=&#160;str.toLowerCase();
							</programlisting>
							<para>
								For more information, we recommend
								<link xl:href="http://www.w3schools.com/jsref/jsref_obj_string.asp">W3 schools JavaScript string reference</link>
								.
							</para>
						</entry>
					</row>
					<row>
						<entry>NUMBER</entry>
						<entry>
							<para>Numbers are treated as regular JavaScript numbers, which
								means that they have (among others) methods and operators like:
							</para>
							<programlisting>
								var&#160;num&#160;=&#160;values[0];

								//&#160;format&#160;with&#160;2&#160;decimals
								var&#160;formattedNumber&#160;=&#160;num.toFixed(2);

								//&#160;add,&#160;subtract,&#160;multiply&#160;or&#160;divide
								var&#160;m&#160;=&#160;(4&#160;+&#160;num&#160;*&#160;2&#160;-&#160;1)&#160;/&#160;2;
							</programlisting>
							<para>
								For more information, we recommend
								<link xl:href="http://www.w3schools.com/jsref/jsref_obj_number.asp">W3 schools JavaScript number reference</link>
								and also check out the
								<link xl:href="http://www.w3schools.com/jsref/jsref_obj_math.asp">Math function</link>
								reference.
							</para>
						</entry>
					</row>
					<row>
						<entry>DATE</entry>
						<entry>
							<para>Date values are treated as Java dates, which is a bit
								unusual, but leaves you with almost an identical interface as a
								regular JavaScript date. Here's a summary of typical methods:
							</para>
							<programlisting>
								var&#160;d&#160;=&#160;values[0];

								var&#160;year&#160;=&#160;d.getYear();
								var&#160;month&#160;=&#160;d.getMonth();
								var&#160;date&#160;=&#160;d.getDate();
								var&#160;hour&#160;=&#160;d.getHour();
								var&#160;minutes&#160;=&#160;d.getMinutes();
								var&#160;seconds&#160;=&#160;d.getSeconds();

								//&#160;milliseconds&#160;since&#160;1970-01-01
								var&#160;timestamp&#160;=&#160;d.getTime();
							</programlisting>
							<para>
								For a full reference, please look at the Java
								<link
									xl:href="http://download.oracle.com/javase/6/docs/api/java/util/Date.html">Date class reference</link>
								.
							</para>
						</entry>
					</row>
					<row>
						<entry>BOOLEAN</entry>
						<entry>Boolean (true/false) values are simply booleans, no sugar
							coating added :)
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</section>

	<section id="invoke_child_analysis_job">
		<title>Invoke child Analysis job</title>
		<para>With this transformation it is possible to compose a job that
			embeds functionality from another saved job.
		</para>
		<para>The job that is invoked will be stripped from it's analysis
			section, which means that only transformations remain. That way you
			can split up complex transformation flows into smaller pieces - each
			represented as a job file.
		</para>
		<para>
			To configure the transformation, select the columns from your
			current job's source which needs to be piped into the child job. The
			amount of columns selected needs to be the same as the amount of
			columns defined in the child job. This will be checked automatically,
			making it impossible to run the transformation otherwise.
		</para>
	</section>

	<section id="equals_filter">
		<title>Equals</title>
		<para>
			The
			<emphasis>Equals</emphasis>
			filter provides a way to make a simple filtering condition based on a
			white list / valid list of values. Simply enter a list of values that
			you accept for a given column, and then you can map your flow to the
			VALID outcome of the filter.
		</para>
		<para>Here's an example of an Equals filter configuration where valid
			Gender values are being checked.
		</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="filter_reference_equals.jpg" format="JPG"
					scalefit="1" />
			</imageobject>
		</mediaobject>
		<para>Use the plus/minus buttons to grow or shrink the list of values
			you want to accept.
		</para>
		<para>If placed as the first component in a flow, the Equals filter is
			optimizable in a way where it will modify your originating query.
			This means that it is also an appropriate filter to use if you just
			want to sample the data used in your job.
		</para>
	</section>

	<section id="max_rows_filter">
		<title>Max rows</title>
		<para>
			The
			<emphasis>Max rows</emphasis>
			filter is used to limit the amount of records that
			are passed further
			on in the job's flow.
		</para>
		<para>If placed as the first component in a flow, the Max rows filter
			is
			optimizable in a way where it will modify your originating query.
			This means that it is also an appropriate filter to use if you just
			want to sample the data used in your job.
		</para>
	</section>

	<section id="not_null_filter">
		<title>Not null</title>
		<para>
			The
			<emphasis>Not null</emphasis>
			filter is a simple filter that can be used to exclude null values
			from your flow. Additionally you can select whether or not you want
			to accept empty strings ("") or not.
		</para>
		<para>If placed as the first component in a flow, the Not null filter
			is
			optimizable in a way where it will modify your originating query.
			This means that it is also an appropriate filter to use if you just
			want to sample the data used in your job.
		</para>
	</section>
	<section id="union">
		<title> Union </title>
		<para>
			The
			<emphasis> Union</emphasis>
			transformer allows you to combine multiple streams into one.
			Providing what is equivalent to a union of tables.
			Use it to fuse data
			streams coming from different source
			tables. You can
			define new fields
			whose values represent whatever is
			available from
			one of the input
			streams.
		</para>

		<para>
			Below is an example of a job with the
			<emphasis>Union</emphasis>
			transformation and a
			<link linkend="what_is_datastore">composite datastore</link>
			. The composite datastore constains several data sources,
			each with customer information. The Union transformer in this
			example aims to combine tables of these data sources so that a
			single stream of data can be consumed with record from all the sources.
		</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="union_example_job.png" format="PNG"
					scalefit="1" />
			</imageobject>
		</mediaobject>
		<para>
			The configuration of the Union transformation is done by lining up
			column from the sources that should be combined. In the example shown
			'CUSTOMERNUMBER' and 'id' are combined into one new field. Similarly
			'CUSTOMERNAME' and 'family_name' is combined and so on.
		</para>
	</section>

</chapter>
