<?xml version="1.0" encoding="UTF-8"?>
<chapter id="command_line_interface" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.oasis-open.org/docbook/4.5"
	xsi:schemaLocation="http://www.oasis-open.org/docbook/4.5 http://www.oasis-open.org/docbook/xsd/4.5/docbook.xsd">

	<title>Command-line interface</title>

	<chapterinfo>
		<abstract>
			<para>DataCleaner offers a Command-Line Interface (CLI) for
				performing
				various tasks, including executing analysis jobs, via simple commands
				that can be invoked eg. as a scheduled tasks.
			</para>
		</abstract>
	</chapterinfo>
	
	<section id="cli_executables">
		<title>Executables</title>
		<para>Depending on your distribution of DataCleaner, you will have one
			of these CLI executables included:
		</para>
		<orderedlist>
			<listitem>
				<para>
					<emphasis>datacleaner-console.exe</emphasis>
					, which is a Windows-only executable.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>datacleaner.cmd</emphasis>
					, which is a script to start DataCleaner in Windows.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>datacleaner.sh</emphasis>
					, which is a script to start DataCleaner in Unix-like systems, like
					Linux and Mac OS.
				</para>
			</listitem>
			<listitem>
				<para>If you're running DataCleaner in Java Webstart mode, then
					there is no Command-Line Interface!
				</para>
			</listitem>
		</orderedlist>
	</section>

	<section id="cli_usage_scenarios">
		<title>Usage scenarios</title>
		<para>The usage scenarios of DataCleaner's CLI are:</para>

		<orderedlist>
			<listitem>
				<para>Executing an analysis job</para>
			</listitem>
			<listitem>
				<para>List registered datastores</para>
			</listitem>
			<listitem>
				<para>List schemas in a datastore</para>
			</listitem>
			<listitem>
				<para>List tables in a schema</para>
			</listitem>
			<listitem>
				<para>List columns in a table</para>
			</listitem>
			<listitem>
				<para>List available analyzers, transformers or filters</para>
			</listitem>
		</orderedlist>

		<para>
			How these scenarios are attained is revealed by invoking your
			executable with the
			<emphasis>-usage</emphasis>
			argument:
		</para>

		<programlisting>
			&gt;&#160;datacleaner-console.exe&#160;-usage
			-conf&#160;(-configuration, --configuration-file) FILE
			&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;:&#160;XML&#160;file&#160;describing&#160;the&#160;configuration&#160;of&#160;DataCleaner
			-ds (-datastore, --datastore-name) VAL
			&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;:&#160;Name&#160;of&#160;datastore&#160;when&#160;printing&#160;a&#160;list&#160;of&#160;schemas,&#160;tables&#160;or&#160;columns
			-job (--job-file) FILE
			&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;:&#160;An&#160;analysis&#160;job&#160;XML&#160;file&#160;to&#160;execute
			-list&#160;[ANALYZERS&#160;|&#160;TRANSFORMERS&#160;|&#160;FILTERS&#160;|&#160;DATASTORES&#160;|&#160;SCHEMAS&#160;|&#160;TABLES&#160;|&#160;COLUMNS]
			&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;:&#160;Used&#160;to&#160;print&#160;a&#160;list&#160;of&#160;various&#160;elements&#160;available&#160;in&#160;the&#160;configuration
			-s (-schema, --schema-name) VAL
			&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;:&#160;Name&#160;of&#160;schema&#160;when&#160;printing&#160;a&#160;list&#160;of&#160;tables&#160;or&#160;columns
			-t (-table, --table-name) VAL
			&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;:&#160;Name&#160;of&#160;table&#160;when&#160;printing&#160;a&#160;list&#160;of&#160;columns
		</programlisting>

	</section>

	<section id="cli_executing_a_job">
		<title>Executing an analysis job</title>
		<para>Here's how to execute an analysis job - we'll use the bundled
			example job "employees.analysis.xml":
		</para>
		<programlisting>
			&gt;&#160;datacleaner-console.exe&#160;-job&#160;examples/employees.analysis.xml
			SUCCESS!

			...

			RESULT:
			Value distribution for column: REPORTSTO
			Top values:
			&#160;- 1102: 6
			&#160;- 1143: 6
			&#160;- 1088: 5
			Null count: 0
			Unique&#160;values: 0


			RESULT:
			&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Match&#160;count&#160;Sample
			Aaaaaaa&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;22&#160;William
			Aaaa&#160;Aaa&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1&#160;Foon&#160;Yue


			RESULT:
			&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Match&#160;count&#160;Sample
			aaaaaaaaaa&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;23&#160;jfirrelli


			RESULT:
			&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Match&#160;count&#160;Sample
			Aaaaa&#160;Aaa&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;17&#160;Sales&#160;Rep
			AA&#160;Aaaaaaaaa&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2&#160;VP&#160;Marketing
			Aaaa&#160;Aaaaaaa&#160;(AAAA)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1&#160;Sale&#160;Manager&#160;(EMEA)
			Aaaaa&#160;Aaaaaaa&#160;(AA)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1&#160;Sales&#160;Manager&#160;(NA)
			Aaaaa&#160;Aaaaaaa&#160;(AAAAA,&#160;AAAA)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1&#160;Sales&#160;Manager&#160;(JAPAN,&#160;APAC)
			Aaaaaaaaa&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1&#160;President

			...
		</programlisting>

		<para>As you can see from the listing, the results of the analysis
			will be printed directly to the command-line output. If you want to
			save the results to a file, simply use your operating systems
			built-in functionality to pipe command-line output to a file,
			typically using the '&gt;' operator.</para>
	</section>

	<section id="cli_listing">
		<title>Listing datastore contents and available components</title>
		<para>
			The Command-Line Interface allows for listing of datastore
			contents
			and available components. The intended usage for this is to
			aid in
			hand-editing an analysis file, if this is desired. By using the
			<emphasis>-list</emphasis>
			arguments you can get the metadata of your datastore and the
			DataCleaner components that will allow you to manually compose an
			analysis file.
		</para>

		<para>
			Listing the contents of a datastore is pretty self-explanatory, if
			you look at the output of the
			<emphasis>-usage</emphasis>
			command. Here's a few examples, using the example database 'orderdb':
		</para>

		<programlisting>
			&gt;&#160;datacleaner-console.exe&#160;-list&#160;datastores
			Datastores:
			-----------
			Country codes
			orderdb

			&gt;&#160;datacleaner-console.exe&#160;-list&#160;tables&#160;-ds&#160;orderdb
			Tables:
			-------
			CUSTOMERS
			CUSTOMER_W_TER
			DEPARTMENT_MANAGERS
			DIM_TIME
			EMPLOYEES
			OFFICES
			ORDERDETAILS
			ORDERFACT
			ORDERS
			PAYMENTS
			PRODUCTS
			QUADRANT_ACTUALS
			TRIAL_BALANCE

			&gt;&#160;datacleaner-console.exe&#160;-list&#160;columns&#160;-ds&#160;orderdb&#160;-table&#160;employees
			Columns:
			--------
			EMPLOYEENUMBER
			LASTNAME
			FIRSTNAME
			EXTENSION
			EMAIL
			OFFICECODE
			REPORTSTO
			JOBTITLE
		</programlisting>

		<para>
			Listing DataCleaner's components is done by setting the
			<emphasis>-list</emphasis>
			argument to one of the three component types: ANALYZER, TRANSFORMER
			or FILTER:
		</para>

		<programlisting>
			&gt;&#160;datacleaner-console.exe&#160;-list&#160;analyzers

			...

			name:&#160;Matching&#160;analyzer
			-&#160;Consumes&#160;multiple&#160;input&#160;columns&#160;(type:&#160;UNDEFINED)
			-&#160;Property:&#160;name=Dictionaries,&#160;type=Dictionary,&#160;required=false
			-&#160;Property:&#160;name=String&#160;patterns,&#160;type=StringPattern,&#160;required=false
			name:&#160;Pattern&#160;finder
			-&#160;Consumes&#160;2&#160;named&#160;inputs
			&#160;&#160;&#160;Input&#160;column:&#160;Column&#160;(type:&#160;STRING)
			&#160;&#160;&#160;Input&#160;column:&#160;Group&#160;column&#160;(type:&#160;STRING)
			-&#160;Property:&#160;name=Discriminate&#160;text&#160;case,&#160;type=Boolean,&#160;required=false
			-&#160;Property:&#160;name=Discriminate&#160;negative&#160;numbers,&#160;type=Boolean,&#160;required=false
			-&#160;Property:&#160;name=Discriminate&#160;decimals,&#160;type=Boolean,&#160;required=false
			-&#160;Property:&#160;name=Enable&#160;mixed&#160;tokens,&#160;type=Boolean,&#160;required=false
			-&#160;Property:&#160;name=Ignore&#160;repeated&#160;spaces,&#160;type=Boolean,&#160;required=false
			-&#160;Property:&#160;name=Upper&#160;case&#160;patterns&#160;expand&#160;in&#160;size,&#160;type=boolean,&#160;required=false
			-&#160;Property:&#160;name=Lower&#160;case&#160;patterns&#160;expand&#160;in&#160;size,&#160;type=boolean,&#160;required=false
			-&#160;Property:&#160;name=Predefined&#160;token&#160;name,&#160;type=String,&#160;required=false
			-&#160;Property:&#160;name=Predefined&#160;token&#160;regexes,&#160;type=String,&#160;required=false
			-&#160;Property:&#160;name=Decimal&#160;separator,&#160;type=Character,&#160;required=false
			-&#160;Property:&#160;name=Thousands&#160;separator,&#160;type=Character,&#160;required=false
			-&#160;Property:&#160;name=Minus&#160;sign,&#160;type=Character,&#160;required=false

			...

			&gt;&#160;datacleaner-console.exe&#160;-list&#160;transformers

			...

			name:&#160;Tokenizer
			-&#160;Consumes&#160;a&#160;single&#160;input&#160;column&#160;(type:&#160;STRING)
			-&#160;Property:&#160;name=Delimiters,&#160;type=char,&#160;required=true
			-&#160;Property:&#160;name=Number&#160;of&#160;tokens,&#160;type=Integer,&#160;required=true
			-&#160;Output&#160;type&#160;is:&#160;STRING
			name:&#160;Whitespace&#160;trimmer
			-&#160;Consumes&#160;multiple&#160;input&#160;columns&#160;(type:&#160;STRING)
			-&#160;Property:&#160;name=Trim&#160;left,&#160;type=boolean,&#160;required=true
			-&#160;Property:&#160;name=Trim&#160;right,&#160;type=boolean,&#160;required=true
			-&#160;Property:&#160;name=Trim&#160;multiple&#160;to&#160;single&#160;space,&#160;type=boolean,&#160;required=true
			-&#160;Output&#160;type&#160;is:&#160;STRING

			...
		</programlisting>
	</section>

	<section id="section_parameterizable_jobs">
		<title>Parameterizable jobs</title>
		<para>If you want to make a part of a job parameterizable/variable,
			then it is possible to do so. Currently this is a feature only
			supported by means of editing the .analysis.xml files though, since
			the DataCleaner graphical user interface does not store job variables
			when saving jobs.
		</para>
		<para>In the source section of your job, you can add variables which
			are key/value pairs that will be referenced throughout your job. Each
			variable can have a default value which will be used in case the
			variable value is not specified. Here's a simple example:
		</para>
		<programlisting>
			...

			&lt;source&gt;
			&#160;&#160;&lt;data-context&#160;ref="my_datastore"&#160;/&gt;
			&#160;&#160;&lt;columns&gt;
			&#160;&#160;&#160;&#160;&lt;column&#160;path="column1"&#160;id="col_1"&#160;/&gt;
			&#160;&#160;&#160;&#160;&lt;column&#160;path="column2"&#160;id="col_2"&#160;/&gt;
			&#160;&#160;&lt;/columns&gt;
			&#160;&#160;&lt;variables&gt;
			&#160;&#160;&#160;&#160;&lt;variable&#160;id="filename"&#160;value="/output/dc_output.csv"&#160;/&gt;
			&#160;&#160;&#160;&#160;&lt;variable&#160;id="separator"&#160;value=","&#160;/&gt;
			&#160;&#160;&lt;/variables&gt;
			&lt;/source&gt;

			...
		</programlisting>
		<para>
			In the example we've defined two variables:
			<emphasis>filename</emphasis>
			and
			<emphasis>separator</emphasis>
			. These we can refer to for specific property values, further down in
			our job:
		</para>

		<programlisting>
			...

			&lt;analyzer&gt;
			&#160;&#160;&lt;descriptor&#160;ref="Write&#160;to&#160;CSV&#160;file"/&gt;
			&#160;&#160;&lt;properties&gt;
			&#160;&#160;&#160;&#160;&lt;property&#160;name="File"&#160;ref="filename"&#160;/&gt;
			&#160;&#160;&#160;&#160;&lt;property&#160;name="Quote&#160;char"&#160;value="&amp;quot;"&#160;/&gt;
			&#160;&#160;&#160;&#160;&lt;property&#160;name="Separator&#160;char"&#160;ref="separator"&#160;/&gt;
			&#160;&#160;&lt;/properties&gt;
			&#160;&#160;&lt;input&#160;ref="col_1"&#160;/&gt;
			&#160;&#160;&lt;input&#160;ref="col_2"&#160;/&gt;
			&lt;/analyzer&gt;

			...
		</programlisting>

		<para>
			Now the property values of the
			<emphasis>File</emphasis>
			and
			<emphasis>Separator char</emphasis>
			properties in the
			<emphasis>Write to CSV file</emphasis>
			have been made parameterizable. To execute the job with new variable
			values, use
			<emphasis>-var</emphasis>
			parameters from the command line, like this:
		</para>

		<programlisting>
			DataCleaner-console.exe&#160;-job&#160;my_job.analysis.xml&#160;-var&#160;filename=/output/my_file.csv&#160;-var&#160;separator=;
		</programlisting>
	</section>

	<section id="cli_overriding_configuration_elements">
		<title>Dynamically overriding configuration elements</title>
		<para>
			Since version 2.5 of DataCleaner it is possible to override elements
			in the
			<link linkend="chapter_configuration_file">configuration file</link>
			dynamically from the command line. This is a feature which can be
			useful in scenarios where you want the to invoke the same job but
			with slightly different configuration details.
		</para>
		<para>For example, you might want to reuse the same job to be executed
			on several similar CSV files, or similar database environments.
			Let us
			assume that you have a CSV datastore that is defined like this:
		</para>
		<programlisting>
			&lt;/datastore-catalog&gt;
			&#160;&#160;&lt;csv-datastore&#160;name="My csv file"&gt;
			&#160;&#160;&#160;&#160;&lt;filename&gt;/path/to/file.csv&lt;/filename&gt;
			&#160;&#160;&lt;/csv-datastore&gt;
			&lt;/datastore-catalog&gt;
		</programlisting>
		<para>To override the filename dynamically, you have to specify the
			property path (datastore catalog, then datastore name, then property
			name) with a '-D' parameter on the command line. Furthermore any
			spaces or dashes are removed and the succeeding character is
			uppercased. In the end it will look like "camelCase" strings, like
			this:
		</para>
		<programlisting>DataCleaner-console.exe&#160;...&#160;-DdatastoreCatalog.myCsvFile.filename=anotherfile.csv
		</programlisting>
		<para>This mechanism can be used for any configuration property within
			the datastore catalog and reference data catalog.
		</para>
	</section>

</chapter>
