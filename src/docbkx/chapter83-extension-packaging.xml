<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.oasis-open.org/docbook/4.5"
	xsi:schemaLocation="http://www.oasis-open.org/docbook/4.5 http://www.oasis-open.org/docbook/xsd/4.5/docbook.xsd">

	<title>Extension packaging</title>

	<chapterinfo>
		<abstract>
			<para>
				DataCleaner extensions are packages of added functionality,
				written in Java. To correctly package an extension, this chapter
				will walk through the details.
			</para>
		</abstract>
	</chapterinfo>

	<section id="extensions_annotated_components">
		<title>Annotated components</title>
		<para>The main principle behind extension discovery in DataCleaner is
			annotated classes. Any component that should be discovered should
			have either of these annotations:
		</para>

		<orderedlist>
			<listitem>
				<para>
					<emphasis>@java.inject.Named</emphasis>
					- for classes that implement the Transformer, Filter or Analyzer
					interface.
				</para>
			</listitem>
			<listitem>
				<para>
					<emphasis>@org.datacleaner.api.RendererBean</emphasis>
					- for classes that implement the Renderer interface.
				</para>
			</listitem>
		</orderedlist>

		<para>Please refer to the javadoc documentation of the interfaces for
			details on usage.
		</para>
	</section>

	<section id="extensions_single_jar_file">
		<title>Single JAR file</title>
		<para>The extension must consist of a single JAR file. If you have
			dependencies other than the libraries provided by the DataCleaner
			distribution, you need to package these inside your own JAR file. If
			you're using Maven for your build, the Maven Assembly Plugin can
			provide this functionality easily using this snippet in your POM:
		</para>
		<programlisting lang="xml">
			&lt;build&gt;
			&#160;&lt;plugins&gt;
			&#160;&#160;&lt;plugin&gt;
			&#160;&#160;&#160;&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
			&#160;&#160;&#160;&lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;
			&#160;&#160;&#160;&lt;version&gt;2.2.1&lt;/version&gt;
			&#160;&#160;&#160;&lt;configuration&gt;
			&#160;&#160;&#160;&#160;&lt;descriptorRefs&gt;
			&#160;&#160;&#160;&#160;&#160;&lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;
			&#160;&#160;&#160;&#160;&lt;/descriptorRefs&gt;
			&#160;&#160;&#160;&lt;/configuration&gt;
			&#160;&#160;&lt;/plugin&gt;
			&#160;&lt;/plugins&gt;
			&lt;/build&gt; </programlisting>
	</section>

	<section id="extensions_metadata_xml">
		<title>Extension metadata XML</title>
		<para>
			To improve the experience, you can optionally include metadata about
			the extension in an XML file, bundled
			<emphasis>within</emphasis>
			the JAR file itself.
		</para>
		<para>
			The name of the extension metadata file has to be
			<emphasis>datacleaner-extension.xml</emphasis>
			and be placed in the root directory of the JAR file. Here's an
			example of how the file looks like:
		</para>
		<programlisting lang="xml">
			&lt;extension&#160;xmlns="http://eobjects.org/datacleaner/extension/1.0"&gt;
			&#160;&#160;&lt;name&gt;My&#160;extension&lt;/name&gt;
			&#160;&#160;&lt;package&gt;path.to.extension&lt;/package&gt;
			&#160;&#160;&lt;description&gt;This&#160;is&#160;an&#160;example&#160;extension.&#160;I&#160;should&#160;put&#160;a&#160;short&#160;description&#160;here.&lt;/description&gt;
			&#160;&#160;&lt;icon&gt;path/to/extension/ExtensionIcon.png&lt;/icon&gt;
			&#160;&#160;&lt;author&gt;John&#160;Doe&lt;/author&gt;
			&#160;&#160;&lt;url&gt;http://datacleaner.org/extensions&lt;/url&gt;
			&#160;&#160;&lt;version&gt;1.0&lt;/version&gt;
			&lt;/extension&gt;
		</programlisting>
		<para>The added value of this metadata is that DataCleaner can expose
			this information to the user and also use it to manage updates of the
			the extension etc. The metadata file is however, completely optional.
		</para>
	</section>

	<section id="extensions_component_icons">
		<title>Component icons</title>
		<para>If you wish to add a custom icon for your components (eg. a
			transformer or analyzer), you need to place the icon as a PNG image
			with the same name as the fully classified class name of the
			component.
		</para>
		<para>An example: If your component class name is
			"com.company.ext.MyAnalyzer", then the icon for this component should
			be located at "/com/company/ext/MyAnalyzer.png" in the extension JAR
			file.
		</para>
		<para>Similarly, if you bundle your own ComponentCategory
			implementations (which define the menu groups in DataCleaner), you
			can define icons for these by adding a PNG file with a fully
			classified filename corresponding to the ComponentCategory class
			name.
		</para>
	</section>

</chapter>
